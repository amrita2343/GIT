KUBERNETS
apiVersion: apps/v1
kind: Deployment
metadata:
 name: nginx-deployment
spec:
 replicas: 2
 selector:
 matchLabels:
 app: nginx
 template:
 metadata:
 labels:
 app: nginx
 spec:
 containers:
 - name: nginx
 image: nginx:1.21
 ports:
 - containerPort: 80
 - 




   kubectl apply -f nginx-deployment.yaml
   kubectl get pods
   kubectl expose deployment nginx-deployment --type=NodePort --name=nginx-service
   kubectl get svc

   kubectl scale deployment nginx-deployment --replicas=4
   kubectl get pods
   kubectl delete svc nginx-service
kubectl delete deployment nginx-deployment

JENKINS


docker pull jenkins/jenkins:lts

docker run -d -p 8080:8080 -p 50000:50000 --name jenkins -v
jenkins_home:/var/jenkins_home -v //var/run/docker.sock:/var/run/docker.sock
jenkins/jenkins:lts


docker run -d -p 8080:8080 -p 50000:50000 --name jenkins -v jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkins/jenkins:lts

docker ps


MKDIR AMRITA
CD AMRITA
ECHO .>INDEX.HTML
CODE .
ECHO .>DOCKERFILE
CODE .
DOCKER BUILD -T AMRITA .
DOCKER IMAGES
DOCKER RUN -D -P --NAME AMRITA AMRITA
DOCKER RUN -D -P --NAME AMRITA AMRITA

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Dockerized Website</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
        }
        h1 {
            color: #2c3e50;
        }
    </style>
</head>
<body>
    <h1>Welcome to My Dockerized Website!</h1>
    <p>This website is served using NGINX in a Docker container.</p>
</body>
</html>


# Use the official NGINX image as a base image
FROM nginx:alpine

# Copy the HTML file into the NGINX default directory
COPY index.html /usr/share/nginx/html/

# Expose port 80 to allow access to the web server
EXPOSE 80

# Start the NGINX server
CMD ["nginx", "-g", "daemon off;"]


Docker with kubernets
mkdir Vishnu
cd Vishnu
echo .>app.py
code .
echo .>dockerfile
code .
echo .>requirements.txt
code . 
docker build -t Vishnu/flask-api:latest .


GIT HUB

GIT ADD AMM.HTML
GIT COMMIT -M "DONE"
GIT PUSH ORIGIN MAIN
GIT CHECKOUT -B AMRITA
                    GIT ADD AMRITA.PY
GIT COMMIT -M "FINISH"
GIT PUSH ORIGIN AMRITA
GIT CHECKOUT MAIN
GIT MERGE AMRITA
GIT PUSH ORIGIN MAIN
GIT PULL ORIGIN MAIN






REQUIREMENT	CATEGORY	JUSTIFICATION
Search books by title and author  Must-Have	  Core functionality for basic library operations.
Online book reservation system	  Must-Have 	Essential for user convenience and accessibility.
Generate monthly reports for administrators 	Must-Have   	Critical for tracking and reporting purposes.
Support for QR code scanning	  Could-Have   	Adds convenience but not critical for the initial system.
User-friendly dashboard for librarians   	Must-Have  	Fundamental for managing library activities efficiently.
Allow users to review and rate books  	Could-Have	    Enhances user engagement but not a core function.
Integrate a chatbot for user assistance    	Should-Have	     Improves user support but can be postponed if necessary.
Mobile app version of the system   	Should-Have	     Increases accessibility but is not immediately required.
Multi-language support     	Could-Have	     Supports inclusivity but is not essential for launch.

CI CD
docker run -d -p 8080:8080 -p 50000:50000 --name jenkins \
-v jenkins_home:/var/jenkins_home \
-v /var/run/docker.sock:/var/run/docker.sock \
jenkins/jenkins:lts

docker logs jenkins

APP.PY
from flask import Flask
app = Flask(__name__)

@app.route("/")
def home():
    return "Hello, CI/CD with Jenkins!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

DOCKERFILE
FROM python:3.9-slim

WORKDIR /app
COPY . /app
RUN pip install flask
EXPOSE 5000
CMD ["python", "app.py"]


pipeline {
    agent {
        docker { image 'docker:stable' }
    }
    environment {
        DOCKER_IMAGE = 'your-dockerhub-username/sample-app'
    }
    stages {
        stage('Clone Repository') {
            steps {
                git 'https://github.com/your-repository/sample-app.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }
        stage('Run Tests') {
            steps {
                sh 'docker run --rm $DOCKER_IMAGE python -m unittest'
            }
        }
        stage('Push to Docker Hub') {
            steps {
                withDockerRegistry(credentialsId: 'dockerhub-credentials') {
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
        stage('Deploy to Cloud') {
            steps {
                sh 'kubectl apply -f deployment.yaml'
            }
        }
    }
}



deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
    spec:
      containers:
      - name: sample-app
        image: your-dockerhub-username/sample-app:latest
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
spec:
  selector:
    app: sample-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5000
  type: NodePort

kubectl apply -f deployment.yaml

